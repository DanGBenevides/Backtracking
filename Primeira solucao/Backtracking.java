// Trabalho 1 - Backtracking
// Algoritmo Backtracking para resolver o problema da soma dos subconjuntos
// Alunos: Arthur Santiago Loschi Ruiz e Daniel Gomes Benevides
// Professor: Daniel Capanema
// Disciplina: Projeto e Análise de Algoritmos
// Última modificação: 13/11/2023

import java.util.ArrayList;
import java.util.List;

public class Backtracking {

    static Boolean flag = false;
    public static void main(String[] args) {
        int lista[] = {744, 1879, 315, 1031, 757, 680, 1634, 1525, 1209, 783, 1067, 1388, 1349, 1796, 919, 1440, 356, 1475, 646, 1861, 939, 124, 1241, 558, 466, 1972, 1708, 454, 1242, 425, 709, 1186, 674, 1986, 1212, 1874, 1465, 509, 1324, 1802, 958, 1040, 1825, 1996, 1747, 1182, 1146, 1060, 419, 200, 1698, 162, 1530, 1269, 297, 1450, 434, 1417, 210, 1136, 941, 536, 1337, 633, 1250, 324, 1362, 1453, 1885, 1968, 1086, 1939, 1732, 535, 918, 663, 672, 1517, 1848, 850, 1302, 1395, 1152, 642, 668, 507, 1947, 781, 39, 139, 1543, 1742, 105, 1043, 1976, 1984, 1949, 1374, 317, 1916, 1382, 584, 725, 1299, 556, 1346, 1683, 461, 1365, 816, 615, 1505, 1926, 563, 1793, 1439, 1275, 793, 1712, 125, 956, 351, 567, 705, 480, 224, 1397, 1547, 953, 669, 272, 1691, 114, 1599, 1906, 23, 746, 704, 1446, 1743, 1511, 1414, 1895, 1234, 1432, 433, 452, 1038, 1034, 427, 1878, 1225, 328, 420, 1015, 1207, 1240, 1471, 1563, 1681, 1285, 1550, 310, 529, 444, 85, 359, 1424, 497, 868, 1016, 225, 1369, 609, 281, 1399, 1164, 858, 610, 1400, 762, 1106, 156, 451, 752, 887, 1707, 1140, 1236, 446, 245, 347, 1662, 1902, 701, 1373, 1278, 64, 1108, 179, 607, 1048, 1839, 370, 1120, 151, 995, 822, 780, 1572, 890, 1005, 541, 313, 845, 808, 1889, 520, 1051, 1145, 1807, 1330, 654, 155, 29, 852, 373, 1083, 894, 847, 843, 572, 1920, 618, 1834, 1717, 1952, 564, 470, 262, 981, 1907, 1718, 1077, 1944, 1004, 1239, 741, 1852, 1341, 1039, 130, 726, 908, 1880, 787, 964, 201, 1727, 1893, 26, 180, 1483, 1630, 188, 1168, 970, 1284, 590, 698, 1815, 177, 187, 112, 163, 1487, 1925, 69, 1819, 996, 587, 990, 136, 1762, 1653, 1655, 1840, 902, 445, 1701, 722, 1677, 883, 1965, 448, 25, 346, 103, 303, 537, 265, 991, 568, 1203, 92, 1875, 1401, 1456, 1539, 1892, 888, 95, 622, 720, 1866, 1591, 1357, 1416, 1113, 1248, 1100, 1863, 1837, 1584, 1696, 971, 1553, 530, 1, 1433, 1817, 784, 943, 1844, 1966, 392, 1675, 441, 1969, 1771, 1226, 38, 149, 181, 1075, 547, 1827, 1044, 688, 617, 1361, 387, 735, 102, 931, 428, 591, 1808, 1911, 677, 77, 817, 1706, 1917, 1132, 456, 989, 1612, 562, 592, 325, 1326, 740, 670, 1479, 1871, 1411, 473, 1237, 276, 1988, 476, 1728, 718, 1932, 844, 280, 745, 167, 681, 412, 1538, 613, 514, 559, 1678, 1148, 190, 1423, 1661, 46, 577, 1472, 1567, 1296, 693, 634, 1094, 1555, 1526, 805, 295, 17, 920, 775, 199, 1007, 1769, 960, 501, 1305, 1575, 697, 1537, 1684, 135, 1903, 146, 1409, 1797, 212, 813, 1780, 263, 323, 1873, 1266, 812, 731, 1008, 966, 1252, 1846, 1042, 640, 578, 1778, 1469, 1415, 121, 479, 1738, 766, 503, 1310, 1403, 108, 506, 279, 1323, 264, 900, 79, 1611, 1617, 651, 717, 896, 1836, 440, 1300, 934, 11, 1080, 867, 686, 1619, 275, 1580, 56, 1790, 1870, 876, 974, 1849, 1426, 1069, 645, 1570, 1467, 194, 1454, 148, 915, 695, 258, 969, 1609, 1812, 481, 667, 259, 134, 1622, 353, 1099, 438, 1460, 288, 998, 1396, 1524, 638, 1256, 1149, 1366, 626, 1342, 1980, 115, 72, 1468, 975, 1364, 779, 1994, 192, 1766, 1858, 1205, 1682, 31, 1421, 1761, 1540, 1378, 1514, 1583, 1927, 154, 1368, 818, 1594, 907, 1193, 1912, 1585, 1287, 1443, 48, 696, 284, 802, 569, 580, 728, 278, 1466, 172, 450, 133, 598, 1218, 838, 1636, 1183, 1228, 1632, 1829, 394, 341, 405, 1102, 1470, 1054, 879, 914, 534, 418, 169, 62, 459, 1294, 806, 1002, 604, 1565, 600, 1897, 1504, 1030, 732, 1221, 1197, 34, 1521, 750, 267, 596, 1569, 252, 66, 789, 366, 1408, 1053, 1345, 214, 1652, 742, 824, 287, 1957, 1387, 1689, 170, 291, 978, 769, 1942, 1752, 1074, 1176, 1650, 337, 1335, 1608, 449, 777, 623, 930, 1523, 1975, 384, 6, 320, 770, 307, 1853, 431, 1484, 330, 80, 128, 1158, 758, 936, 1929, 942, 1308, 185, 158, 835, 800, 1208, 94, 761, 1047, 1131, 238, 332, 1970, 612, 424, 1887, 656, 1307, 1967, 261, 797, 302, 74, 439, 308, 1033, 791, 616, 1292, 1229, 150, 299, 1656, 1716, 1842, 493, 1049, 374, 1320, 1777, 1603, 637, 1624, 186, 754, 1355, 935, 821, 8, 1143, 312, 1159, 1669, 1213, 196, 796, 401, 465, 1805, 1890, 1457, 1891, 846, 1930, 1123, 540, 1270, 1704, 88, 801, 1491, 1826, 1990, 673, 1512, 832, 513, 1933, 1082, 1590, 959, 675, 597, 1160, 230, 1089, 1276, 67, 916, 500, 1534, 830, 1938, 875, 1598, 965, 18, 1945, 1125, 1744, 608, 141, 1615, 300, 866, 35, 911, 1117, 923, 1441, 1277, 518, 1251, 42, 950, 120, 1992, 751, 82, 1350, 1898, 1559, 404, 1985, 1730, 1379, 426, 1261, 1115, 117, 1667, 45, 305, 1838, 661, 1438, 566, 1914, 727, 599, 1648, 1860, 1894, 68, 1057, 234, 1383, 283, 488, 266, 650, 853, 1061, 1670, 86, 804, 1685, 1664, 579, 202, 160, 1404, 627, 1977, 527, 1668, 829, 1162, 1243, 1216, 986, 132, 1318, 1073, 1798, 1444, 833, 153, 636, 1645, 1536, 1494, 173, 760, 1313, 1283, 271, 621, 1014, 1955, 1398, 739, 987, 1372, 823, 1402, 1451, 624, 487, 765, 1135, 205, 629, 1963, 253, 1928, 531, 560, 723, 477, 1028, 689, 747, 1217, 1147, 421, 1327, 126, 408, 270, 81, 583, 1010, 423, 1919, 309, 333, 1420, 389, 1625, 1631, 416, 1687, 884, 209, 1621, 1233, 1703, 684, 743, 1588, 1174, 899, 1502, 1087, 1122, 1163, 1794, 782, 1097, 1488, 864, 619, 1851, 1066, 1017, 1760, 1499, 21, 652, 1427, 699, 1180, 1900, 14, 1449, 345, 644, 834, 250, 1660, 819, 395, 1024, 980, 143, 436, 1156, 1935, 52, 1322, 659, 1153, 862, 1510, 37, 73, 1680, 1679, 1750, 724, 1476, 474, 532, 410, 945, 1659, 1056, 1179, 841, 335, 1692, 1850, 628, 1888, 947, 1172, 1816, 1128, 515, 236, 1516, 90, 1464, 1385, 1071, 75, 1088, 1121, 116, 828, 1998, 195, 1736, 183, 1112, 176, 1544, 671, 1020, 1720, 778, 982, 1937, 856, 43, 1595, 1824, 235, 748, 1166, 233, 240, 1332, 1527, 334, 70, 1134, 1818, 241, 1723};
        List<Integer> subconjunto = new ArrayList<Integer>();
        int alvo = 11786;
        long tempoInicioBT = System.nanoTime();
        subconjuntosBacktracking(lista, 0, 0, alvo, subconjunto);
        long tempoFinalBT = System.nanoTime();

        System.out.println("Tempo Backtracking: " + ((tempoFinalBT - tempoInicioBT) / 1000000.0) + " milisegundos");
    }

    // Método para encontrar os subconjuntos com a soma desejada usando backtracking
    static void subconjuntosBacktracking(int list[], int soma, int posicaoInicial, int somaAlvo, List<Integer> subconjunto) 
    { 
        // Imprime o subconjunto se a soma for igual ao somaAlvo
        if( somaAlvo == soma && flag == false) {
            // Encontrou o subconjunto, para a execução
            flag = true;
            System.out.println(subconjunto);
            if (subconjunto.size() > 0) {
                subconjunto.remove(subconjunto.size() - 1);
            }
            // Encerra o método
            return;
        } 
        // Se a soma for maior que o somaAlvo, remove o último elemento do subconjunto
        else if (somaAlvo < soma) {
            if (subconjunto.size() > 0) {
                subconjunto.remove(subconjunto.size() - 1);
            }
        }  
        else { 
            for( int i = posicaoInicial; i < list.length; i++ ) 
            { 
                if (flag == false) {
                    subconjunto.add(list[i]);
                    subconjuntosBacktracking(list, soma + list[i], i + 1, somaAlvo, subconjunto);
                }
            } 
            if (subconjunto.size() > 0) {
                subconjunto.remove(subconjunto.size() - 1);
            }
        } 
    } 
}
